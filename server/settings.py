"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta as td

from decouple import config

# *******************************************##
# ?       SYSTEM ENV VARIABLES CONFIG
##******************************************##


DATA_UPLOAD_MAX_MEMORY_SIZE = 128000000


DEBUG = True  #! SECURITY WARNING: don't run with debug turned on in production!
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# AUTH_USER_MODEL = "spotter_AI_app.CustomUser"
WSGI_APPLICATION = "server.wsgi.application"
EMAIL_BACKEND = "django_ses.SESBackend"
DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
ROOT_URLCONF = "server.urls"
STATIC_URL = "static/"

SILKY_PYTHON_PROFILER = True

ALLOWED_HOSTS = ["*"]

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    
]

# CORS_ALLOW_ALL_ORIGINS = True



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_ROOT = os.path.abspath(os.path.join(BASE_DIR, "allstatic"))


##******************************************##
# ?        AWS CONFIG
##******************************************##
AWS_STORAGE_BUCKET_NAME = config("AWS_STORAGE_BUCKET_NAME")
AWS_QUERYSTRING_AUTH = True
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_OBJECT_PARAMETERS = {
    "CacheControl": "max-age=86400",
}


# *******************************************##
# ?       SYSTEM ENV VARIABLES CONFIG
##******************************************##

REFRESH_TOKEN_VALIDITY = (
    int(config("REFRESH_TOKEN_VALIDITY")) if config("REFRESH_TOKEN_VALIDITY") else 1
)
ACCESS_TOKEN_VALIDITY = (
    int(config("ACCESS_TOKEN_VALIDITY")) if config("ACCESS_TOKEN_VALIDITY") else 150
)

##******************************************##
# ?        INTERNATIONALIZATION CONFIG
##******************************************##
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = config("TZ_ACTIVE", default=True, cast=bool)



##******************************************##
# ?       SYSTEM SECRET KEY CONFIG
##******************************************##
#! SECURITY WARNING: keep the secret key used in production secret!
try:
    SECRET_KEY = config("APP_KEY")

    if not SECRET_KEY:
        os.environ["SIGN_KEY_DJANGO"] = SECRET_KEY
        print("### >> Please specify 'APP_KEY' value before proceeding forward!!")
        exit(0)
except:
    print(
        "### >> Please specify 'APP_KEY' variable in '.env' before proceeding forward!!"
    )
    exit(0)


##******************************************##
# ?           DATABASE CONFIG
##******************************************##
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.mysql",
#         "NAME": config("DB_NAME"),
#         "USER": config("DB_USERNAME"),
#         "PASSWORD": config("DB_PASSWORD"),
#         "HOST": config("DB_HOST"),
#         "PORT": config("DB_PORT"),
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


##******************************************##
# ?       SYSTEM APPLICATIONS CONFIG
##******************************************##
INSTALLED_APPS = [
    # ? Framework Apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "eb_sqs",
    "silk",
    # ? Custom Apps
    "ping",
    "spotter_AI_app",
]


##******************************************##
# ?          REST FRAMEWORK CONFIG
##******************************************##
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": ["spotter_AI_app.custom_permissions.IsAuthenticated"],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 30,
    "TEST_REQUEST_DEFAULT_FORMAT": "json",
}


##******************************************##
# ?            MIDDLEWARE CONFIG
##******************************************##
MIDDLEWARE = [
    "silk.middleware.SilkyMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


##******************************************##
# ?             TEMPLATES CONFIG
##******************************************##
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


##******************************************##
# ?        PASSWORD VALIDATION CONFIG
##******************************************##
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

##******************************************##
# ?              JWT CONFIG
##******************************************##
SIMPLE_JWT = {
    "USER_ID_FIELD": "UserID",
    "ACCESS_TOKEN_LIFETIME": td(minutes=ACCESS_TOKEN_VALIDITY),
    "REFRESH_TOKEN_LIFETIME": td(days=REFRESH_TOKEN_VALIDITY),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "SIGNING_KEY": SECRET_KEY,
    "VERIFIED_KEY": SECRET_KEY,
    "ALGORITHM": "HS256",
    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}
